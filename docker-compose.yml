version: "3.8"
services:
  db:
    image: "postgres:13-alpine"
    restart: unless-stopped
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - webnet
    env_file: ./config/.env

  web:
    <<: &web
      # Image name is changed in production:
      image: "aphorism:dev"
      build:
        target: development_build
        context: .
        dockerfile: ./docker/Dockerfile
        args:
          FLASK_ENV: development
        cache_from:
          - "aphorism:dev"
          - "aphorism:latest"
          - "*"

      volumes:
        - media:/var/www/media
      depends_on:
        - db
      networks:
        - webnet
      env_file: ./config/.env
      environment:
        FLASK_APP: manage.py
        FLASK_ENV: development
        
    command: flask run --host 0.0.0.0 --port 8000
#    healthcheck:
#      # We use `$$` here because:
#      # one `$` goes to shell,
#      # one `$` goes to `docker-compose.yml` escaping
#      test: |
#        /usr/bin/test $$(
#          /usr/bin/curl --fail http://localhost:8000/health/?format=json
#          --write-out "%{http_code}" --silent --output /dev/null
#        ) -eq 200
#      interval: 10s
#      timeout: 5s
#      retries: 5
#      start_period: 30s

# This task is an example of how to extend existing ones:
#   some_worker:
#     <<: *web
#     command: python manage.py worker_process

networks:
  # Network for your internals, use it by default:
  webnet:

volumes:
  pgdata:
  media:
